DIOCP-v5 0.0.1
  2015-02-22 08:40:40

1.规范单元文件的命名，和组件的命名
2.中文注释重要的过程和类名

DIOCP-v5 0.0.2
  2015-03-04 21:49:41

1.更新DIOCPStreamCoder解码的一处Bug

  //如果缓存中的数据长度不够包头长度，
  lvValidCount := inBuf.validCount;   //pack_flag + head_len + buf_len
  if (lvValidCount < SizeOf(Word) + SizeOf(Integer)  + SizeOf(Integer)) then

  // 之前如下
  if (lvValidCount < SizeOf(Word) + SizeOf(Integer)) then

  // 在客户端只发送了6个字节就进行解码时会出现错误的数据包，从而会T掉客户端

  2015-03-04 21:46:53

2. 修复URLEncode，URLDecode在Anddriod和UNICODE下的异常
*   2015-03-05 12:53:38

3  修正UNICODE下URLDecode和URLEncode的BUG
   原来的Request.RequestURL ->改成Request.RequestURI
   RequestURL 带完整的参数
   2015-03-05 12:58:55
   
4. 添加TDiocpHttpRequest.DecodeURLParam({$IFDEF UNICODE} pvEncoding:TEncoding {$ELSE}pvUseUtf8Decode:Boolean{$ENDIF});
   解码URL中的参数，放到参数列表(RequestParamsList)中
   在OnDiocpHttpRequest中调用(和DecodePostDataParam一样)
   2015-03-05 22:42:04

5. 修正在编译成64位EXE时HttpSERVER运行出错的BUG
   2015-03-05 22:42:42
   
6. 优化URLDecode解码
   2015-03-05 22:42:58

7.* 池化TDiocpHttpRequest请求对象
  加入QWorkers/DiocpTask异步处理请求，不阻塞Iocp线程
  
8.修复SplitStrings,分隔符最后一个字符串没有加入的bug, 导致Http解析时最后一个参数没有解析
  感谢(Xjumping  990669769)反馈bug

9 修正Request.Tag借出时置为0(可能会引起服务端主动关闭连接)
  2015-04-04 12:00:56

10.编码器模式和Http异步处理优化
  *   2015-04-08 12:34:33
  *    (感谢 (Xjumping  990669769)/(suoler)反馈bug和提供bug重现)
  *    改为异步处理Http请求后
  *      当连接已经关闭，但是请求还没有来得及处理，然后连接上下文已经归还到池，这个时候应该放弃处理任务,(可能会导致处理逻辑时出现AV异常)


  *    (感谢 suoler反馈bug和提供bug重现)
  *    异步处理逻辑请求后OnContextAction
  *      当连接已经关闭，但是请求还没有来得及处理，然后连接上下文已经归还到池，这个时候应该放弃处理任务,(可能会导致处理逻辑时出现AV异常)

11.修复在不使用SOCKET重用情况下重复创建Socket句柄的Bug。
   优化内存使用
   2015-04-10 13:08:06

12
 *   2015-04-10 18:00:52
 *     停止时加入等待所有的投递的AcceptEx请求回归回归后再进行关闭IOCP引擎,(会导致投递出去的AcceptEx无法回归(XP下出现泄漏))
 *     感谢 Xjumping  990669769, 反馈bug

13: 修改客户端重连方案。
 * 在断开事件里面投递了重连请求，马上进行了连接，而且连接成功, 但是这个时候断开事件还没有处理完成(调试时会抛出出现断言异常)
  2015-04-13 13:09:25 飘城小二(114069657);反馈bug

14: * 移植DIOCPv3的文件服务器到V5
  2015-05-03 11:42:59
  
15：修正编码层一个致命的BUG, 在客户端拼命推送多个包数据时，可能会引发多个线程同时操作同一个Context, 从而会引发不可控制的异常(Out of Memory!, av等)。
  现在改为在编码成功后，投递到一个待处理的任务队列，然后由逻辑处理线程去读取这个队列，进行排队任务的处理，保证只有同一个线程在处理单个连接的任务。
  2015-05-21 17:32:47(感谢小白提供解决思路, Http解码器暂未修改)
  
16
 *   1. 扩展服务器TDiocpExTcpServer, 可以定义开始标志和结束标志(也可以只设定结束标志)，然后自动进行解包触发OnContextDataAction事件。
 *   2. 字符串服务器TDiocpStringTcpServer, 可以设定开始字符串和结束字符串(也可以只设定结束字符串)，然后自动进行解包触发OnContextStringAction事件。
 *      2015-07-15 09:00:09



17  2015年7月16日 18:19:00
    TDiocpBlockTcpClient添加RecvBufEnd函数
    /// <summary>
    ///   阻塞接收数据直到接收到一个endBuf为止
    ///   如果收到的数据到达len大小，会直接返回
    /// </summary>
    /// <returns>
    ///   返回接收到的数据长度
    /// </returns>
    /// <param name="buf"> 用来存放的起始内存地址 </param>
    /// <param name="len"> 内存大小 </param>
    /// <param name="endBuf"> 判断结束的起始内存地址 </param>
    /// <param name="endBufLen"> 内存大小 </param>
    function RecvBufferEnd(buf: Pointer; len: cardinal; endBuf: Pointer; endBufLen:
        Integer): Integer;

18: utils.buffer.pas中添加函数
 *1. 2015年7月17日 15:01:12
 *    TBufferLink添加函数
 *     /// <summary>
 *    ///  从当前位置开始搜索Buffer
 *    ///   返回搜索到subBuf的起始位置
 *    ///   如果搜索不到返回-1
 *    /// </summary>
 *    function SearchBuffer(subBuf:PAnsiChar; subBufLen:Cardinal): Integer;
 
19: diocp.tcp.client.pas中添加TDiocpExRemoteContext可以定义包的开始和结束位置。
 

20. 添加diocp.udp.pas，和samples\UDPTester

21. diocp.ex.httpServer初步完成Cookie和Session 2015-07-29 12:04:57
    
22. 修复ex.tcpclient, ex.tcpserver编码问题，发送大数据时，无法解码的bug
    2015-08-17 14:25:56
 
 